using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace EmployeeManagement
{
    public class Startup
    {
        private IConfiguration _config;
        //constructor
        public Startup(IConfiguration config)
        {
            _config = config;
        }


        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        // public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILogger<Startup> logger)
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            //first middleware
            if (env.IsDevelopment())
            {
                /*DeveloperExceptionPageOptions developerExceptionPageOptions = new DeveloperExceptionPageOptions
                {
                    SourceCodeLineCount = 10
                };*/

                // app.UseDeveloperExceptionPage(developerExceptionPageOptions);
                app.UseDeveloperExceptionPage();
            }
           /* else if (env.IsEnvironment("UAT") || env.IsProduction() || env.IsStaging())
            {
                app.UseExceptionHandler("Error");
            }*/

            app.UseRouting();

            //second middleware
            /*app.Run(async (context) => {
            await context.Response.WriteAsync(_config["MyKey"]);});
        */
            /*   app.Use(async (context,next) => {
                   //await context.Response.WriteAsync("1st middleware");
                   logger.LogInformation("MW1: Incoming request");
                   await next();
                   logger.LogInformation("MW1: Outgoing response");
               });
               app.Use(async (context, next) => {
                   logger.LogInformation("MW2: Incoming request");
                   await next();
                   logger.LogInformation("MW2: Outgoing response");
               });*/


            /*DefaultFilesOptions defaultFilesOptions = new DefaultFilesOptions();
            defaultFilesOptions.DefaultFileNames.Clear();
            defaultFilesOptions.DefaultFileNames.Add("page1.html");
            app.UseDefaultFiles(defaultFilesOptions);
            */
            //app.UseDefaultFiles();
            //app.UseStaticFiles();
            /*
             * app.UseDefaultFiles(defaultFilesOptions); & app.UseStaticFiles();
             * are replaced with app.UseFileServer();
             */
            /* FileServerOptions fileServerOptions = new FileServerOptions();
              fileServerOptions.DefaultFilesOptions.DefaultFileNames.Clear();
              fileServerOptions.DefaultFilesOptions.DefaultFileNames.Add("page1.html");
              app.UseFileServer(fileServerOptions);*/


            //app.UseFileServer();
            app.UseStaticFiles();
            app.UseMvcWithDefaultRoute();

            app.Run(async (context) => {
                await context.Response.WriteAsync("Hello World!");
                // await context.Response.WriteAsync("Hosting Environment: " + env.EnvironmentName);
                // throw new Exception("Some error processing the request");
                //await context.Response.WriteAsync("2nd middleware");
                //await context.Response.WriteAsync("MW3: Request handled and response produced");
                //logger.LogInformation("MW3: Request handled and response produced");
                //await context.Response.WriteAsync("Hello World!");
            });

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapGet("/", async context =>
                {

                    await context.Response.WriteAsync("Hosting Environment: " + env.EnvironmentName);
                    /*await context.Response.WriteAsync(
                        System.Diagnostics.Process.GetCurrentProcess().ProcessName);
                    */
                    //await context.Response.WriteAsync(_config["MyKey"]);

                });
            });

            
        }
    }
}
